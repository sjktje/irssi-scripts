# ho_reformat.data by Svante J. Kvarnstrom <sjk@ankeborg.nu>
# Last changed 091014

# This ho_reformat setup utilizes the following windows:
# client	- connect, exit, nick changes
# kill		- kill, kline, bopm klines, resv
# local		- flood warnings, new max user counts, spambot warnings, whois notifications, etc
# rest		- notices that have no rules applied to them.

# Below is some text from the original ho_reformat.data by Garion


# Lines beginning with a # are ignored, as are empty lines.

# Data formats consist of 4 lines:
# - the (unique!) name plus (optional) options.
# - the regexp to match the received server notice with.
# - the format in which to display the message.
# - the name(s) of the window to display the message to plus (optional)
#   the message level of the message.

# The options behind the name are, for now, only "continuematching".
# If this is present, the script will continue matching if this regexp
# has been matched. The default behaviour is to stop once a match has been
# found.

# In the format, $0 is the server tag, and $1 .. $n are the matched strings
# of the regular expression.

# Message level is CRAP by default. Use "MSG" to get a normal message
# hilight, and HILIGHT for a hilight.
# Use any number of target windows to send the message to. For example,
# "client local HILIGHT" will send the reformatted notice to both the windows
# 'client' and 'local' with message level HILIGHT.

# There is one special window, which is "devnull". If a matched server
# notice has "devnull" as target, this notice will be discarded.

# The letter in square brackets in the comment is the user mode that needs
# to be set to see these messages.


# [c] Client connect
# nick, user, host, ip, class, realname
client_connect
Client connecting: (.*) \((.*)\) \[(.*)\] \{.*\} \[(.*)\]
%G!CONN!%n {nick $[-12]1}{comment %g$[!15]3}{chanhost_hilight $[!40]2}{comment $4}
client

# [c] Client exit
# nick, user, host, reason, ip
client_exit
Client exiting: (.*) \((.*)\) \[(.*)\] \[(.*)\]
%r!EXIT!%n {nick $[-12]1{comment %g$[!15]4}{chanhost_hilight $[!40]2}{comment $3}
client

# [c] Ext client connect
# nick, user, host, ip, class, cclient, cserver, num, realname
ext_client_connect
CLICONN ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) (.*)
%G!CONN!%n {nick $[-12]1}{comment %g$[!15]4}{chanhost_hilight $2@$[!40]3} ($6, $7), $9
client

# [C] Ext. client exit
# nick, user, host, ip, num, reason
ext_client_exit
CLIEXIT ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*) (.*)
%r!EXIT!%n {nick $[-12]1 {comment %g$[!15]4} {chanhost_hilight $2@$[!40]3} {comment $6}
client

# [b] Flood
# nick, user, host, server, target
poss_flood
Possible Flooder (.*) \[(.*)@(.*)\] on (.*) target: (.*)
%r!FLOOD!%n $1!$2@$3 ($4) target $5.
local 

# Possible spambot
# nick, user@host, target
poss_spambot
User (.*) \((.*)\) trying to join (.*) is a possible spambot
%ySPAMBOT%n $1 ($2) ($3)
local

# [?] Kill
# nick, killer, path, reason
kill
Received KILL message for (.*)\. From (.*) Path: (.*) \((.*)\)
%W!KILL!%n {nick $[-12]1} by {nick $[-12]2} {comment $4}
kill

# [?] Unresv
# nick, resv
unresv
(.*)!.*\@.*\{.*\} has removed the RESV for: \[(.*)\]
%GUNRESV%n by $1: $2
kill

# [n] Nick change
# oldnick, newnick, user, host
nickchange
Nick change: From (.*) to (.*) \[(.*)@(.*)\]
%c!NICK!%n {nick $[-12]1} -> {nick $[-12]2} {chanhost_hilight $3@$[!40]4}
client

# [?] Oper
# nick, user, host
oper
(.*) \((.*)@(.*)\) is now an operator
%g!OPER!%n $1 ($2@$3).
local

# [?] Failed oper attempt
# nick, user, host
oper_failed
Failed OPER attempt - host mismatch by (.*) \((.*)@(.*)\)
%R!OPERFAIL!%n $1 ($2@$3).
local

# [x] Server split
# source, target
server_split
Server (.*) split from (.*)
%C!NETSPLIT!%n $1 from $2.
local

# [x] Server join
# source, target
server_join
Server (.*) being introduced by (.*)
%R!NET REJOIN!%n $1 from $2.
local

# [?] Spoof
# nick, realhost, spoofhost
spoof
Notice -- (.*) spoofing: (.*) as (.*)
%y!SPOOF!%n $1@$2 ($3).
client

# [?] BOPM tklines
# bopm nick, bopm server, proxy user@host
bopm_tkline
(.*)!.*@.*\.bopm\{.*\} added temporary [0-9]+ min\. K-Line for \[(.*)\] \[.*\]
%r!BOPM!%n $3 ($1)
kill

# [?] Services tklines
# Duration, user@host, reason
a_tkline
A!oper@services.int\{services.ambernet.org\} added temporary (\d+) min. K-Line for \[(.*)\] \[(.*)\]
%r!AKLINE!%n $2 for $1 min: $3
kill

# [?] Services kline
# user@host, reason
a_kline
A!oper@services.int\{services.ambernet.org\} added K-Line for \[(.*)\] \[(.*)\]
%r!AKLINE! $2: $3
kill

# [?] Temporary K-line added
# nick, duration, user, host, reason
tkline_added
(.*) added temporary ([0-9]+) min\. K-Line for \[(.*)@(.*)\] \[(.*)\]
%r!TKLINE!%n $3@$4 [$1] for $2 min: $5
kill

# [?] Temporary K-line expired
# hostmask
tkline_expired
Temporary K-line for \[(.*@.*)\] expired
%g!TKLINE!%n $1.
kill

# [?] K-line active
# nick, user, host
kline_active
KLINE active for (.*)\[(.*)@(.*)]
%g!KLINE!%n active: $1 ($2@$3).
kill 

# [?] D-line active
# nick, user, host
dline_active
DLINE active for (.*)\[(.*)@(.*)]
%C!DLINE!%n active: $1 ($2@$3).
kill

# [?] Attempt to join juped channel
# nick, user, host, channel
user_join_juped
User (.*) \((.*)@(.*)\) is attempting to join locally juped channel (.*) \((.*)\)
%Y!JUPE!%n $4: $1 ($2@$3) (Reason: $5)
local

# [?] Too many on IP
# nick, user, host, ip
too_many_on_ip
Too many on IP for (.*)\[(.*)@(.*)\] \((.*)\)
%C!IP!%n $4: $1 ($2@$3).
local

# [s] Whois
# nick, user, host
whois_me
(.*) \((.*)@(.*)\) is doing a .?whois on you \[(.*)\]
%G!WHOIS!%G $1 %c[%G$2%G@%G$3%c]%G on %c[%G$4%c]%G is whoising you.
local active

# [?] Operspy
# nick, user, host, opername, actian
operspy
OPERSPY (.*)!(.*)@(.*){(.*)} (.*)
%C!OPERSPY!%n $5 by $1 ($2@$3)
local

# [?] New max local clients
# number
max_local_clients
New Max Local Clients: (.*)
%C!MAX!%n $1
local

# [?] STATS <letter>
# letter, nick, user, host, server
stats_requested
STATS (.) requested by (.*) \((.*)@(.*)\) \[(.*)\]
%c!STATS!%n $1 $2($3@$4) $5.
local

# [?] LINKS
# arg, nick, user, host, server
links_requested
LINKS '(.*)' requested by (.*) \((.*)@(.*)\) \[(.*)\]
%c!LINKS!%c '$1' $2($3@$4) $5.
local

# [?] GLINE request
# nick, host, reason
gline_request
Notice -- (.*)!.*@.* on .* is requesting gline for \[(.*)\] \[(.*)\]
%c!GLINEREQUEST!%n $1: $2 [$3]
kill 

# [?] GLINE trigger
# nick, user, host, server, user@host, reason
gline_trigger
Notice -- (.*)!(.*)@(.*) on (.*) has triggered gline for \[(.*)\] \[(.*)\]
%R!GLINE!%n $1: $5 [$6]
kill

# [y] MOTD
# nick, user, host, server
motd_requested
motd requested by (.*) \((.*)@(.*)\) \[(.*)\]
%c!MOTD!%n $1 ($2@$3) $4.
local

# [y] TRACE
# nick, user, host, server
trace_requested
trace requested by (.*) \((.*)@(.*)\) \[(.*)\]
%c!TRACE!%n $1 ($2@$3) $4.
local

# [s] REHASH
# nick, user, host, opernick
rehash
([^!]*)!([^@]*)@([^{]*){(.*)} is rehashing server config file
[$0] %cREHASH%n $1 ($2@$3) {$4}
local

# Catchall for the rest
catchall
(.*)
REST: $1
rest

# EOF
